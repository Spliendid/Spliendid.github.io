<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>webgl 到 移动端 移植教程</title>
      <link href="2020/11/29/webgl%20%E5%88%B0%20%E7%A7%BB%E5%8A%A8%E7%AB%AF%20%E7%A7%BB%E6%A4%8D%E6%95%99%E7%A8%8B/"/>
      <url>2020/11/29/webgl%20%E5%88%B0%20%E7%A7%BB%E5%8A%A8%E7%AB%AF%20%E7%A7%BB%E6%A4%8D%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="554CACA8A7B14F44B619B3F436131A66" alt="image"></p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>用 svn 从 <code>https://39.107.64.153/svn/MobilePlatformProject</code>检出示例工程，主要为</p><ul><li><code>MobilePlatformProject\</code>下的Unity示例工程 </li><li><code>MobilePlatformProject\HotFixCSharpProject\HotFixProject</code>下的C# 热更工程</li></ul><h1 id="一-资源整合"><a href="#一-资源整合" class="headerlink" title="一. 资源整合"></a>一. 资源整合</h1><p>所有资源打包整合到示例unity工程</p><h3 id="1-场景资源、模型、贴图等"><a href="#1-场景资源、模型、贴图等" class="headerlink" title="1. 场景资源、模型、贴图等"></a>1. 场景资源、模型、贴图等</h3><ol><li>把webgl中的Main场景导出UnityPackage（打包不包括代码、dll文件），拖入示例unity工程</li><li>打开导入的Main场景,将其重命名为<code>HotFixScene</code></li><li>scripts去掉<code>StepOparationMethod</code>，用<code>HotFixMBProxy</code>代替</li></ol><p><img src="https://images2018.cnblogs.com/blog/1332963/201806/1332963-20180606150248591-654278757.png" alt="image"></p><blockquote><p>Type：HotFixProject.StepOparationMethod<br>4. scripts 下添加 <strong><em>热更管理</em></strong>、**<em>资源加载**</em></p></blockquote><p><img src="F77D252A7DAC411990A7CB527023D64C" alt="image"><br>5. 重新设置UI布局,打开<code>Tools-&gt;ChangeUI</code>，正确的UI 路径<code>Assets&gt;Prefab&gt;Exchange&gt;Canvas</code>,待转换的UI 为场景中的Canvas，都拖拽上后点击转换按钮</p><p><img src="4D43819CF82F47C6AB046CB5E84F4B39" alt="image"> <img src="0AD1FB93D90F4026A80E77C3E001FB1B" alt="image"><br>5. player 替换为 exchange下的player，<strong>MoveAndLook</strong>脚本上的see[0]要重新拖拽，步骤中设镜头的可能要重新设置位置<br>6. 拖拽<code>Assets&gt;Prefab&gt;Exchange&gt;EasyTouchControlsCanvas</code> 至 场景中，添加摇杆<br>7. 如果是iOS平台,将所有高亮脚本上的<code>HighlightingRenderer</code>脚本的<code>AntiAliasing</code>选项选为Disabled,否则可能会出现花屏</p><p><img src="CE96347A289C4E3482FCD4CB42309D76" alt="image"><br>8. 如果是iOS平台,如果有墙体变花的情况,将LightingSetting里的CompressLightmaps设为FALSE,然后重新烘焙</p><p><img src="F31CC2E193F24189829045B98AF8110B" alt="image"> </p><h3 id="2-Resource、拖拽的资源"><a href="#2-Resource、拖拽的资源" class="headerlink" title="2. Resource、拖拽的资源"></a>2. Resource、拖拽的资源</h3><ol><li><strong>Resource文件</strong>下要用到的资源，<strong>拖拽到脚本</strong>上的资源，要打成ab包，然后代码中通过加载 ab包    的方式获取</li><li>存储的步骤放StreamingAssets下</li><li><strong>大小步骤信息</strong>，<strong>步骤语音</strong>，提示等可以<strong>从服务器获取</strong>的可以不用打包，直接在本地修改<h3 id="3-AB包管理"><a href="#3-AB包管理" class="headerlink" title="3.AB包管理"></a>3.AB包管理</h3>加载和卸载主要用到了<code>AssetsManager</code>类</li><li>打ab包</li></ol><ul><li>打场景包用<code>CustomEditor/Build Scene</code></li><li>打单独物体用<code>CustomEditor/Build Objs</code></li><li>根据Tag打包用<code>CustomEditor/Build All Assetbundle</code></li></ul><ol start="2"><li>加载ab包</li></ol><ul><li><code>AssetsManager.GetAsset(&quot;AB包名称&quot;)</code> 来获取AB包资源 <strong>【注意 AB包打包后名称都是小写】</strong></li><li><code>AssetsManager.AssetDic</code>  存放的已经下载好的AB包</li></ul><ol start="3"><li>卸载ab包,<code>AssetsManager.UnLoadAB(&quot;AB包名称&quot;)</code>  来卸载不用的AB包</li></ol><h1 id="二-代码整合"><a href="#二-代码整合" class="headerlink" title="二. 代码整合"></a>二. 代码整合</h1><p>代码进行整合到C#热更工程</p><h3 id="1-与主工程不同的代码"><a href="#1-与主工程不同的代码" class="headerlink" title="1. 与主工程不同的代码"></a>1. 与主工程不同的代码</h3><ol><li>一般主工程需要修改的脚本会在热更工程中留出修改的地方，可直接在热更工程中直接修改</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">namespace HotFixProject</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;对应\Assets\Scripts\core\StepControl\ChangeBigStep.cs -- SetUI()</span><br><span class="line">    public class HF_ChangeBigStep</span><br><span class="line">    &#123;</span><br><span class="line">        public static void SetUI()</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;进行修改：</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>如果擅自修改了主工程的代码则需要另寻他法<h3 id="2-新增代码"><a href="#2-新增代码" class="headerlink" title="2. 新增代码"></a>2. 新增代码</h3></li><li>自己新增的代码都要写在热更工程中</li><li>如果需要挂载的可以有两种方式挂载：①在scene中挂载<code>HotFixMBProxy</code>来挂载，并且需要挂载的类需要继承<code>MonoBase </code>类;②在热更工程汇总直接<code>AddComponent</code> 来挂载。这里推荐第二种方式<h3 id="3-拖拽获取"><a href="#3-拖拽获取" class="headerlink" title="3. 拖拽获取"></a>3. 拖拽获取</h3>热更工程中的类定义的变量不可以通过拖拽获取需要通过其他方式，推荐以下两种方式</li><li>挂有<strong>ObjID</strong>的物体可以通过id获取，例：<code> water = ObjID.GetObjByID&lt;ParticleSystem&gt;(1714);</code></li><li>通过路径获取，<strong>Tools-&gt;获取物体路径</strong> 获取物体绝对路径，然后通过 <code>ToolScript.GetObjByPath(&quot;&quot;)</code> 获取物体<blockquote><p>路径的根路径不可隐藏，否则找不到</p></blockquote></li></ol><h3 id="4-例：StepOparationMethod-（参考热更工程示例）"><a href="#4-例：StepOparationMethod-（参考热更工程示例）" class="headerlink" title="4. 例：StepOparationMethod （参考热更工程示例）"></a>4. 例：StepOparationMethod （参考热更工程示例）</h3><ol><li>将引用<code>Assembly-CSharp</code> 删除，重新引用 <code>工程目录\Library\ScriptAssemblies\Assembly-CSharp.dll</code></li><li>继承 <code>MonoBase</code> 类</li><li>将示例<strong>StepOparationMethod</strong>脚本<code>OparationMethodBase</code> 代码段拷贝进来</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#region OparationMethodBase</span><br><span class="line">、、、</span><br><span class="line">#endregion</span><br></pre></td></tr></table></figure><ol start="3"><li>拖拽赋值的都要在<code>Start()</code>中重新获取，可以通过路径查找也可以通过id获取</li><li>需要挂载的新增的脚本挂载上，并进行初始化操作</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public void Start()</span><br><span class="line">       &#123;</span><br><span class="line">           &#x2F;&#x2F;获取wuti</span><br><span class="line">           FindObjs();</span><br><span class="line">           AddCom();</span><br><span class="line">           RegisterEvent();</span><br><span class="line">       &#125;</span><br><span class="line">&#x2F;&#x2F;获取定义变量，因为无法拖拽赋值</span><br><span class="line">       void FindObjs()</span><br><span class="line">       &#123;</span><br><span class="line">           water &#x3D; ObjID.GetObjByID&lt;ParticleSystem&gt;(1714);</span><br><span class="line">           Tishi &#x3D; ToolScript.GetObjByPath(&quot;&#x2F;Canvas&#x2F;Tishi&quot;);&#x2F;&#x2F;使用绝对路径查找</span><br><span class="line">           tishText &#x3D; Tishi.transform.Find(&quot;tishiText&quot;).GetComponent &lt;TishiText&gt;();</span><br><span class="line">           OKButton &#x3D; Tishi.GetComponent&lt;Button&gt;();</span><br><span class="line">           ···</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">        &#x2F;&#x2F;挂载自己添加的脚本</span><br><span class="line">       void AddCom()</span><br><span class="line">       &#123;</span><br><span class="line">           GameObject go &#x3D; ToolScript.GetObjByPath(&quot;&#x2F;Canvas&#x2F;乙醇脱水&#x2F;数据记录表&quot;);</span><br><span class="line">         tc &#x3D;   go.AddComponent&lt;TabsControl&gt;();</span><br><span class="line">         dt &#x3D;   go.AddComponent&lt;DataTextInput&gt;();</span><br><span class="line"></span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h1 id="三-本地测试"><a href="#三-本地测试" class="headerlink" title="三. 本地测试"></a>三. 本地测试</h1><h3 id="1-本地实验测试"><a href="#1-本地实验测试" class="headerlink" title="1. 本地实验测试"></a>1. 本地实验测试</h3><ol><li>宏添加<code>LOCAL_TEST</code>、<code>ON_OLDTERRACE</code></li><li>将热更工程代码打包，拷贝<strong>HotFixProject.dll</strong> 和<strong>HotFixProject.pdb</strong></li><li>将所有需要加载的资源放入StreamingAssets文件夹下，包括热更代码、ab包、存储的步骤信息等</li><li>运行测试</li></ol><h3 id="2-本地大厅加载测试"><a href="#2-本地大厅加载测试" class="headerlink" title="2. 本地大厅加载测试"></a>2. 本地大厅加载测试</h3><ol><li>去掉宏<code>LOCAL_TEST</code></li><li>将Scene打ab包</li><li>将下列资源放入服务器指定目录</li></ol><ul><li>场景ab包</li><li>HotFixProject.dll</li><li>HotFixProject.pdb</li><li>存储的步骤信息</li><li>封面图片</li></ul><ol start="3"><li>生成版本信息Json</li><li>本地运行大厅，找到自己的实验运行测试</li></ol><p><strong>注意：</strong> 通过大厅运行试验，会出现材质丢失，光效不正常，这属于正常现象</p><h1 id="四-打包测试"><a href="#四-打包测试" class="headerlink" title="四. 打包测试"></a>四. 打包测试</h1><p>直接打包到移动端，安卓或IOS,运行测试</p><meta name="referrer" content="never">]]></content>
      
      
      <categories>
          
          <category> aaa </category>
          
          <category> bbb </category>
          
          <category> ccc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aaa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity中的欧拉角旋转</title>
      <link href="2020/11/29/beauty/"/>
      <url>2020/11/29/beauty/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="never"><p><span style="font-size: 14pt;"><strong><span style="font-family: 微软雅黑;">一</span>.Unity中的欧拉角旋转</strong></span></p><p>Unity<span style="font-family: 宋体;">中的欧拉角旋转可以分两个角度来看，世界和本地。</span></p><p><span style="font-family: 宋体;">World&nbsp;世界&nbsp;Z--&gt;X--&gt;Y&nbsp; :</span></p><p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1332963/201906/1332963-20190605173340679-546293904.gif" alt="" /></p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>Local&nbsp;本地&nbsp;Y--&gt;X--&gt;Z ：</p><p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1332963/201906/1332963-20190605173032096-745013842.gif" alt="" /></p><p>&nbsp;</p><p>&nbsp;</p><p><span style="font-size: 14pt;"><strong><span style="font-family: 微软雅黑;">二</span>.Unity中的旋转矩阵</strong></span></p><p>&nbsp;</p><p>&nbsp;&nbsp;<strong>Rx</strong>,<strong>Ry</strong>,<strong>Rz </strong></p><p><span style="font-family: 宋体;">由于</span>unity<span style="font-family: 宋体;">中的旋转遵从左手定则，因此</span><span style="font-family: Calibri;">x,y,z</span><span style="font-family: 宋体;">轴的旋转矩阵为</span></p><p><strong>Rx</strong>:</p><p><img src="https://img2018.cnblogs.com/blog/1332963/201906/1332963-20190605162918525-1882179316.png" alt="" /></p><p>&nbsp;</p><p><strong>Ry</strong>:&nbsp;</p><p><img src="https://img2018.cnblogs.com/blog/1332963/201906/1332963-20190605162931899-249844871.png" alt="" /></p><p>&nbsp;</p><p><strong>Rz:</strong>&nbsp;</p><p><img src="https://img2018.cnblogs.com/blog/1332963/201906/1332963-20190605162943182-1257230772.png" alt="" /></p><p>&nbsp;</p><p><span style="color: #ff0000;"><strong>(<span style="font-family: 宋体;">其实和右手坐标系 </span><span style="font-family: Calibri;">+ </span><span style="font-family: 宋体;">右手定则的旋转 是一样的</span><span style="font-family: Calibri;">)</span></strong></span></p><p>&nbsp;&nbsp;<span style="font-family: 宋体;">合并旋转矩阵</span> <strong>R</strong></p><p><span style="font-family: 宋体;">这里合并按照世界的欧拉旋转来搞，因此</span><strong>R </strong>=<strong>&nbsp;RyRxRz</strong></p><p><strong>R:</strong>&nbsp;</p><p><span style="color: #ff0000;"><strong>&nbsp;</strong></span></p><p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1332963/201906/1332963-20190605163001516-728299265.png" alt="" /></p><p><span style="color: #ff0000;">&nbsp;<strong>(c:cos s:sin)</strong></span></p><p><span style="font-size: 14pt;"><strong><span style="font-family: 微软雅黑;">三</span>.旋转矩阵转欧拉角</strong></span></p><p>&nbsp;&nbsp;</p><p><span style="font-family: 宋体;">由以上公式很好求出旋转矩阵</span>-&gt;<span style="font-family: 宋体;">欧拉角的转换：</span></p><p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1332963/201906/1332963-20190605163057089-455314988.png" alt="" /></p><p>&nbsp;</p><p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1332963/201906/1332963-20190605163106498-1335401385.png" alt="" /></p><p>&nbsp;</p><p align="center">&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><div class="cnblogs_code"><pre><span style="color: #0000ff;">float</span> x = Mathf.Atan2(-matrix[<span style="color: #800080;">1</span>, <span style="color: #800080;">2</span>], Mathf.Sqrt(matrix[<span style="color: #800080;">1</span>, <span style="color: #800080;">0</span>] *matrix[<span style="color: #800080;">1</span>, <span style="color: #800080;">0</span>] + matrix[<span style="color: #800080;">1</span>, <span style="color: #800080;">1</span>] * matrix[<span style="color: #800080;">1</span>, <span style="color: #800080;">1</span><span style="color: #000000;">]));</span><span style="color: #0000ff;">float</span> y = Mathf.Atan2(matrix[<span style="color: #800080;">0</span>,<span style="color: #800080;">2</span>], matrix[<span style="color: #800080;">2</span>,<span style="color: #800080;">2</span><span style="color: #000000;">]);</span><span style="color: #0000ff;">float</span> z = Mathf.Atan2(matrix[<span style="color: #800080;">1</span>,<span style="color: #800080;">0</span>],matrix[<span style="color: #800080;">1</span>,<span style="color: #800080;">1</span>]);</pre></div><p>&nbsp;</p><p>&nbsp;</p><p><strong><a href="文档：欧拉角%20旋转矩阵的变换.note%20链接：http://note.youdao.com/noteshare?id=3c3baa8503519cab67b7b682b368add7&amp;sub=AE4E61A1A7B84D249F152099CAE348F4" target="_blank">Demon<span style="font-family: 宋体;">场景</span></a>：</strong></p><p>文档：欧拉角 旋转矩阵的变换.note<br />链接：http://note.youdao.com/noteshare?id=3c3baa8503519cab67b7b682b368add7&amp;sub=AE4E61A1A7B84D249F152099CAE348F4</p><p>&nbsp;</p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> Transform </category>
          
          <category> 矩阵 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 欧拉角 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/11/29/hello-world/"/>
      <url>2020/11/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
